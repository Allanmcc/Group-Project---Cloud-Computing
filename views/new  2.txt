//Lets require/import the HTTP module
var http = require('http');
var express = require('express');
var dispatcher = require('httpdispatcher');
var fs = require('fs');
var Busboy = require('busboy');
var path = require('path');
var app = express();
var crypto = require('crypto'),
	algorithm = 'aes-256-ctr',
	password = 'wtf';

var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var jwt = require('jsonwebtoken');

var AWS = require("aws-sdk");

AWS.config.update({
	region: "us-east-1",
	endpoint: "http://localhost:8000",
	accessKeyId: "myKeyId",
	secretAccessKey: "secretKey"
});

var dynamodb = new AWS.DynamoDB();

var dummy = {
	1: {name: 'lol',
		email: 'lol@lol'
	},
	2: {name: 'lol2',
		email: 'lol2@lol'
	}
};
//Lets define a port we want to listen to
const PORT=8080; 
app.use(cookieParser());
app.use(bodyParser.urlencoded());
app.set('secret', '1234');
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');
app.use(express.static(__dirname + '/public'));


app.get('/test', function(req,res){
	res.render('sol.jade', {
		title: 'pass data test',
		users: dummy
	});

});
app.get("/index", function(req,res) {
	console.log("Index here");
	 fs.readFile('./index.html', function(error, content) {
     if (error) {
        serverError(500, content, req, res);
      } else {
        renderHtml(content, req, res);
      }
    });
});

app.get("/get", function(req,res) {
	console.log("get here");
	 fs.readFile('./getfile.html', function(error, content) {
     if (error) {
        serverError(500, content, req, res);
      } else {
        renderHtml(content, req, res);
      }
    });
});

app.get("/signup", function(req,res) {
	console.log("get here");
	 fs.readFile('./signup.html', function(error, content) {
     if (error) {
        serverError(500, content, req, res);
      } else {
        renderHtml(content, req, res);
      }
    });
});
  

 
var status = 0;
app.get("/checkstatus", function(req,res){
	res.end(status.toString());
	
}); 

app.post("/upload", function(req,res){

	var token = req.cookies.login_token;
	var key = req.body.key;
	var fName;
	var id = '';
	if (!token){
		res.redirect('/login');
	}
	else{
	
		jwt.verify(token, app.get('secret'), function(err, decoded){
			if (err){
				console.log(err);
				res.clearCookie('login_token');
				return res.redirect('./login');
			}
			else{
				id = decoded;
				continue_upload();
				
			}
		
		});
		function continue_upload(){
			var fstream;
			var bb = new Busboy({ headers: req.headers });
			var progress = 0;
			var total = req.headers['content-length'];
			if (key == ''){
				res.redirect('/users');
				return;
			}
			var encrypt = crypto.createCipher(algorithm, password);
			
	

			bb.on('file', function (fieldname, file, filename, encoding, mimetype){
				console.log("here");
				if (filename == ''){
					res.redirect('/user');
					return;
				}
				fName = filename;
				var _dir = './upload/'+'/'+id+'/';
				if (!fs.existsSync(_dir)){
					fs.mkdirSync(_dir);
				}
				console.log("Uploading: "+filename);
				
				/*
				
				var fileParams = {
					TableName: 'user_'+id,
					Item:{
						"file_name": fName,
						"secret_key":key,
					}
				};
				doc.put(fileParams, function(err, data){
					if (err){
						console.log("Error upldating user filelist: ",JSON.stringify(err,null,2));
					}
					else{
						console.log("Added file:", JSON.stringify(data,null,2));
					}
				});
					
				
				*/
				
				file.on('data', function(data){
					progress += data.length;
					var perc = parseInt( (progress/total)*100);
					status = perc;
				});
				
				fstream = fs.createWriteStream(_dir+fName);
				file.pipe(encrypt).pipe(fstream);
			});
			bb.on('finish', function(){
				console.log("Upload Finished");
			
				res.redirect('/user');
			});
			req.pipe(bb);
			req.on("close", function(err){
				fstream.end();
				fs.unlink('./upload/'+id+'/'+fName);
			
			});
		}
	}

	
});

app.post('/getfile', function(req, res){

	var decrypt = crypto.createDecipher(algorithm, password);
	var filename = req.body.filename;
	
	res.setHeader('Content-disposition', 'attachment; filename=' + filename);
	fs.createReadStream("./upload/"+filename).pipe(decrypt).pipe(res);
});


app.get('/user', function(req,res){
	var token = req.body.token || req.query.token || req.headers['x-access-token'] || req.cookies.login_token;
	
	if (token){
		jwt.verify(token, app.get('secret'), function(err, decoded){
			if (err){
				console.log(err);
				res.clearCookie('login_token');
				return res.redirect('./login');
			}
			else{
				console.log(decoded);
				var id = decoded;
				doc = new AWS.DynamoDB.DocumentClient();
				var files = '';
				var params = {
					TableName: 'user_'+id,
					ProjectionExpression: "file_name"
				}
				doc.scan(params, function(err, data){
					if (err){
						console.log("Scan Error: "+JSON.stringify(err, null, 2));
					}
					else{
						files = data.Items;
						data.Items.forEach(function (f){
							console.log(f);
						});
					}
				
				
				});
				res.render('user.jade', {
					id: decoded,
					files: files
				});
				

				
			}
		
		});
	}
	else{
		res.redirect('./login');
	}

});

app.get('/logout', function(req,res){
	res.clearCookie('login_token');
	res.end("logged out");

});

app.get('/login', function(req,res){
	fs.readFile('./login.html', function(error, content) {
	 if (error) {
		serverError(500, content, req, res);
	  } else {
		renderHtml(content, req, res);
	  }
	});

});


app.post('/login_request', function(req,res){
	var email_given = req.body.email;
	var password_given = req.body.password;
	var email;
	var password;
	var id;
	var emailTable = "EmailTable";
	var userTable = "UserTable";
	
	if (email_given.length <= 0){
		res.end("invalid email");
		return;
	}
	if (password_given.length <= 0){
		res.end("invalid password");
		return;
	}
	
	var emailParams = {
		TableName: emailTable,
		AttributesToGet: [
			"user_id"
		],
		Key: {
			"email" : {"S": email_given}

		}
	};
	
	
	var doc = new AWS.DynamoDB;
	
	doc.getItem(emailParams, function(err, data){
	
		if (err){
			console.log(err);
			res.end("internal error");
		}
		else{
			console.log(data);
			if (typeof(data.Item) == "undefined"){
				res.end("Account Not Found");
			}
			else{
				id = data.Item.user_id.N;

				var userParams = {
					TableName: userTable,
					AttributesToGet: [
						"password"
					],
					Key: {
						"user_id" : {"N": id}

					}
				}
				
				doc.getItem(userParams, function(err, data2){
					if (err){
						console.log(err);
						res.end("internal error");
					}
					else{
						console.log(data2);
						if (typeof(data2.Item) == "undefined"){
							res.end("internal error: no user_id in UserTable");
						}
						else{
							password = data2.Item.password.S;
								
							
							
							if (password == password_given){
								var token = jwt.sign(id, app.get('secret'),{
									expiresIn: "24h"
								});
							
								/*res.json({
									success:true,
									message: 'login success',
									token: token
								});*/
								res.clearCookie('login_token');
								
								res.cookie('login_token', token, {maxAge:1000*60*60*24, httpOnly: true});
								console.log('cookie created');
								
								//res.redirect('./user?token='+token);
								res.redirect('./user');
							}
							else{
								
								res.end("incorrect password");
							}
						}
					}
				
				
				});
			}
			
		}
	});

	
	
	
	
});
app.post('/signup_request', function(req, res){

	var email = req.body.email;
	
	var password = req.body.password;
	var id_count;
	var doc = new AWS.DynamoDB.DocumentClient();
	var table = "UserTable";
	var countTable = "AtomicCounters";
	
	var id = "counter";

	var counterParams = {
		TableName: countTable,
		Key:{
			"id": id
		},
		UpdateExpression: "SET #count = #count + :val",
		ExpressionAttributeNames:{
			"#count":"count"
		},
		ExpressionAttributeValues:{
			":val": 1
		},
		ReturnValues: "UPDATED_NEW"
		
	};

	var checkEmailParams = {
		TableName: "EmailTable",
		KeyConditionExpression: "email = :email",
		ExpressionAttributeValues:{
			":email":email
		}
	}
	var params = {
		TableName: countTable,
		KeyConditionExpression: "id = :counter",
		ExpressionAttributeValues:{
			":counter":"counter"
		}
	
	};
	
	doc.query(checkEmailParams, function(err, data){
		if (err){
			console.error("Check Email Error: ",JSON.stringify(err, null, 2));
		}
		else{
			if (data.Items.length > 0){
				res.end("email already exists");
			}
			else{
				addUser();
			}
		}
	
	});
	function addUser(){
		doc.query(params, function(err, data){
			if (err){
				console.error("Error: ", JSON.stringify(err, null, 2));
			}
			else{
				data.Items.forEach(function(item){
					var user_id=item.count;
					var UserParams = {
						TableName: "UserTable",
						Item:{
							"user_id": user_id,
							"email":email,
							"password":password
						}
					};
					var EmailParams = {
						TableName: "EmailTable",
						Item:{
							"email": email,
							"user_id":user_id,
						}
					};
					doc.put(EmailParams, function(err, data){
						if (err){
							console.log("put email error: ",JSON.stringify(err,null,2));
						}
						else{
							console.log("Added email:", JSON.stringify(data,null,2));
						}
					});
					
					doc.put(UserParams, function(err, data){
						if (err){
							console.log("put user error: ",JSON.stringify(err,null,2));
						}
						else{
							console.log("Added user:", JSON.stringify(data,null,2));
								doc.update(counterParams, function(err, data){
								if (err){
									console.error("Error on count: ", JSON.stringify(err, null, 2));
								}
								else{
									console.log("count: ",JSON.stringify(data,null,2));
								}
								
							});
		
							
						}
					});
					var params = {
						TableName : "user_"+user_id.toString(),
						KeySchema:[
							{AttributeName: "file_name", KeyType: "HASH"}
						],
						AttributeDefinitions:[
							{AttributeName: "file_name", AttributeType: "S"}
						],
						ProvisionedThroughput:{
							ReadCapacityUnits:10,
							WriteCapacityUnits:10
						}
					};
					dynamodb.createTable(params, function(err, data) {
						if (err) {
							console.error("Unable to create table. Error JSON:", JSON.stringify(err, null, 2));
						} else {
							console.log("Created table. Table description JSON:", JSON.stringify(data, null, 2));
						}
					});

				});
				
			}
		});
		

		res.end(email+":"+password);
	}
});

//Display Functions

  var serverError = function(code, content, req, res) {
    res.writeHead(code, {'Content-Type': 'text/plain'});
    res.end(content);
  }

  var renderHtml = function(content, req, res) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.end(content, 'utf-8');
  }

  
 app.listen(PORT, function(){
	console.log("Server is running");
 }
	
 );
 /*
//Create a server
var server = http.createServer(handleRequest);

//Lets start our server

server.listen(PORT, function(){
    //Callback triggered when server is successfully listening. Hurray!
    console.log("Server listening on: http://localhost:%s", PORT);
});
*/

		div.input
			p Key
			input(type="text", name="key")




	ul
		each file, i in files
			li
				h2= file.file_name